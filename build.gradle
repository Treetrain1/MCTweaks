plugins {
	id 'fabric-loom' version '+'
	id 'io.github.juuxel.loom-quiltflower' version '+'
	id 'maven-publish'
	id 'eclipse'
	id 'idea'
	id 'java-library'
}

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

loom {
	runtimeOnlyLog4j = true

	mixin {
		defaultRefmapName = "mixins.mctweaks.refmap.json"
	}

	accessWidenerPath = file("src/main/resources/mctweaks.accesswidener")
	interfaceInjection {
		// When enabled, injected interfaces from dependencies will be applied.
		enableDependencyInterfaceInjection = true
	}
}

configurations {
	includeModImplementation
	includeImplementation

	include.extendsFrom includeImplementation
	include.extendsFrom includeModImplementation

	implementation.extendsFrom includeImplementation
	modImplementation.extendsFrom includeModImplementation
}

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	maven {
		url = 'https://jitpack.io'
	}
	maven {
		name = "Modrinth"
		url = "https://api.modrinth.com/maven"

		content {
			includeGroup "maven.modrinth"
		}
	}
	maven {
		url = 'https://maven.terraformersmc.com'

		content {
			includeGroup "com.terraformersmc"
		}
	}
	maven {
		url = 'https://maven.shedaniel.me/'
	}
	maven {
		url 'https://cursemaven.com'

		content {
			includeGroup "curse.maven"
		}
	}
	/*maven {
		name "Siphalor's Maven"
		url "https://maven.siphalor.de"
	}*/
	maven {
		url "https://maven.flashyreese.me/releases"
	}
	maven {
		url "https://maven.flashyreese.me/snapshots"
	}
	maven {
		url = 'https://maven.minecraftforge.net/'
	}
	maven {
		url = 'https://maven.parchmentmc.org'
	}
	maven {
		name = 'Quilt'
		url = 'https://maven.quiltmc.org/repository/release'
	}

	flatDir {
		dirs 'libs'
	}
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${minecraft_version}"
	mappings(loom.layered {
		// please annoy treetrain if this doesnt work
		it.mappings("org.quiltmc:quilt-mappings:${minecraft_version}+build.${quilt_mappings}:intermediary-v2")
		it.parchment("org.parchmentmc.data:parchment-1.19.2:${parchment_mappings}@zip")
		it.officialMojangMappings {
			setNameSyntheticMembers(false)
		}
	})
	modImplementation "net.fabricmc:fabric-loader:${loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}"

	// FrozenLib
	modImplementation "maven.modrinth:frozenlib:${frozenlib_version}"

	// Mod Menu
	modImplementation "com.terraformersmc:modmenu:${modmenu_version}"

	// Cloth Config
	modImplementation("me.shedaniel.cloth:cloth-config-fabric:${cloth_config_version}") {
		exclude(group: "net.fabricmc.fabric-api")
		exclude(group: "com.terraformersmc")
	}
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

quiltflower {
	quiltflowerVersion.set("1.8.0")
}

javadoc {
	options.tags = ["reason"]
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier = 'javadoc'
	from javadoc.destinationDir
}

task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = "UTF-8"
	// Minecraft 1.18 (1.18-pre2) upwards uses Java 17.
	it.options.release = 17
	options.fork = true
	options.incremental = true
}

tasks.withType(Test).configureEach {
	maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
}

java {
	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17

	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

artifacts {
	archives sourcesJar
	archives javadocJar
}

String getVersion() {
	String version = "${mod_version}-${mod_loader}+${minecraft_version}"

	if (findProperty("releaseType") != "stable") {
		version += "-unstable"
	}

	return version
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}
